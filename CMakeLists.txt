cmake_minimum_required(VERSION 3.25)
set(CMAKE_CXX_STANDARD 23)

project(seseragi
  VERSION 0.1.0
  DESCRIPTION "Alembic hierarchy viewer GUI."
  HOMEPAGE_URL https://github.com/ugai/seseragi
  LANGUAGES CXX
)

# Update app.hpp file
set(DO_NOT_MODIFY_COMMENT "DO NOT MODIFY - This file is auto-generated by the CMake configure_file() command.")
configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/include/seseragi/app.hpp.in"
  "${CMAKE_CURRENT_SOURCE_DIR}/include/seseragi/app.hpp" @ONLY)

# Vcpkg ports
include($ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake)
find_package(Alembic CONFIG REQUIRED)
find_package(cxxopts CONFIG REQUIRED)
find_package(hdf5 CONFIG REQUIRED)
find_package(Imath CONFIG REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)

# External git submodules
set(CLIP_EXAMPLES off)
add_subdirectory(external/clip)
add_subdirectory(external/nativefiledialog-extended)

# Slint
set(SLINT_FEATURE_BACKEND_QT OFF)
set(SLINT_NO_QT 1)
set(SLINT_STYLE fluent)
find_package(Slint QUIET)
if (NOT Slint_FOUND)
  include(FetchContent)
  FetchContent_Declare(
    Slint
    GIT_REPOSITORY https://github.com/slint-ui/slint.git
    # `release/1` will auto-upgrade to the latest Slint >= 1.0.0 and < 2.0.0
    # `release/1.0` will auto-upgrade to the latest Slint >= 1.0.0 and < 1.1.0
    GIT_TAG release/1
    SOURCE_SUBDIR api/cpp
  )
  FetchContent_MakeAvailable(Slint)
endif (NOT Slint_FOUND)

# Seseragi
file(GLOB_RECURSE CPP_SOURCES src/*.cpp)
add_executable(seseragi ${CPP_SOURCES})
target_include_directories(seseragi PRIVATE include)
if (MSVC)
  # Force source files to be treated as UTF-8
  add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")
  # Set the code page to UTF-8
  # - Reference: https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page#set-a-process-code-page-to-utf-8
  target_sources(seseragi PRIVATE src/win32_utf8.manifest)

  # Hide the console window in release builds
	set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
	set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
endif()

# Vcpkg ports
target_link_libraries(seseragi PRIVATE Alembic::Alembic)
target_link_libraries(seseragi PRIVATE cxxopts::cxxopts)
if (LINUX)
  target_link_libraries(seseragi PRIVATE hdf5::hdf5-static hdf5::hdf5_hl-static)
endif()
target_link_libraries(seseragi PRIVATE Imath::Imath Imath::ImathConfig)
target_link_libraries(seseragi PRIVATE nlohmann_json::nlohmann_json)
target_link_libraries(seseragi PRIVATE spdlog::spdlog)

# External git submodules
target_include_directories(seseragi PRIVATE external/clip)
target_link_libraries(seseragi PRIVATE clip)
target_link_libraries(seseragi PRIVATE nfd) # Native File Dialog Extended

# Slint
file(GLOB_RECURSE SLINT_SOURCES ui/*.slint)
slint_target_sources(seseragi ${SLINT_SOURCES})
target_link_libraries(seseragi PRIVATE Slint::Slint)
# Enable resource embedding
# - Reference: https://slint.dev/releases/1.4.1/docs/cpp/cmake_reference#resource-embedding
set_property(TARGET seseragi PROPERTY SLINT_EMBED_RESOURCES embed-files)
if (WIN32)
  # Set additional Win32 libraries to avoid build errors
  target_link_libraries(seseragi PRIVATE imm32.lib dwmapi.lib uxtheme.lib uiautomationcore.lib opengl32.lib glu32.lib)
  # On Windows, copy the Slint DLL next to the application binary so that it's found.
  add_custom_command(TARGET seseragi POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy
    $<TARGET_RUNTIME_DLLS:seseragi>
    $<TARGET_FILE_DIR:seseragi> COMMAND_EXPAND_LISTS)
endif()

set(asset_copy_commands)

# Copy/install asset directories
set(ASSET_DIRECTORIES
  asset)
foreach(ASSET_DIRECTORY ${ASSET_DIRECTORIES})
  list(APPEND asset_copy_commands
    COMMAND ${CMAKE_COMMAND} -E copy_directory 
      ${CMAKE_CURRENT_SOURCE_DIR}/${ASSET_DIRECTORY}
      $<TARGET_FILE_DIR:seseragi>/${ASSET_DIRECTORY})
endforeach()
install(DIRECTORY ${ASSET_DIRECTORIES} TYPE DATA COMPONENT assets)

# Copy/install asset files
set(ASSET_FILES
  LICENSE
  README.md
  ThirdPartyNotices.md)
foreach(ASSET_FILE ${ASSET_FILES})
  list(APPEND asset_copy_commands
    COMMAND ${CMAKE_COMMAND} -E copy_if_different 
      ${CMAKE_CURRENT_SOURCE_DIR}/${ASSET_FILE}
      $<TARGET_FILE_DIR:seseragi>/${ASSET_FILE})
endforeach()
install(FILES ${ASSET_FILES} TYPE DATA COMPONENT assets)

add_custom_target(asset_copy ${asset_copy_commands})
add_dependencies(seseragi asset_copy)

install(FILES $<TARGET_RUNTIME_DLLS:seseragi> TYPE BIN COMPONENT applications)
install(TARGETS seseragi RUNTIME DESTINATION bin COMPONENT applications)

# Packaging info
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VENDOR ugai)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} - ${PROJECT_DESCRIPTION}")
set(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/asset\\\\icon-64.png")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_CREATE_DESKTOP_LINKS ${PROJECT_NAME})
set(CPACK_PACKAGE_INSTALL_DIRECTORY ${PROJECT_NAME})
set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
set(CPACK_COMPONENTS_ALL applications assets)
include(CPack)