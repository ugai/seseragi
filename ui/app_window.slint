import { Button, ComboBox, VerticalBox, HorizontalBox, Palette, ScrollView, Spinner, GridBox, LineEdit, TextEdit } from "std-widgets.slint";

import { AbcListView, AbcKvEntry, AbcNode } from "abc_list_view.slint";
import { AboutPopupContent, AppInfo } from "about_popup.slint";

export component AppWindow inherits Window {
    title: app_info.name;
    icon: @image-url("../asset/icon-64.png");
    preferred-width: 600px;
    preferred-height: 800px;

    in property <AppInfo> app_info;

    in property <string> file_path;
    property <bool> has_file_path: file_path != "";

    in property <bool> is_loading;

    in property <string> error_message;
    property <bool> has_error_message: error_message != "";

    in property <[AbcKvEntry]> abc_list_view_archive_items;
    in property <[AbcNode]> abc_list_view_nodes; 

    callback open_button_clicked <=> open_button.clicked;
    callback reload_button_clicked <=> reload_button.clicked;
    callback copy_json_button_clicked <=> copy_json_button.clicked;
    callback reload_file;

    about_popup := PopupWindow {
        width: root.width - 2rem;
        padding-right: 1rem;
        x: 1rem;
        y: 1rem;
        AboutPopupContent { app_info: app_info; }
    }

    spinner_screen := Rectangle{
        width: root.width;
        height: root.height;
        background: gray;
        opacity: is_loading ? 1.0 : 0.0;
        animate opacity { duration: 500ms; }
        Spinner { indeterminate: true; }
    }
    
    VerticalLayout {
        command_bar := VerticalBox {
            padding-left: 0;
            padding-right: 0;

            HorizontalBox {
                padding-top: 0;
                padding-bottom: 0;

                open_button := Button {
                    text: "📂 Open...";
                    enabled: !is_loading;
                    horizontal-stretch: 1;
                }
                reload_button := Button {
                    text: "🔄️ Reload";
                    enabled: has_file_path && !is_loading;
                }
                copy_json_button := Button {
                    text: "📋 Copy JSON";
                    enabled: has_file_path && !is_loading && !has_error_message;
                }
                about_button := Button {
                    text: "❔";
                    clicked => { about_popup.show() }
                }
            }

            if has_file_path: GridBox {
                padding-top: 0;
                padding-bottom: 0;

                Row {
                    Text {
                        text: "File";
                        vertical-alignment: center;
                    }
                    LineEdit {
                        text: file_path;
                        read-only: true;
                        colspan: 2;
                    }
                }
            }
        }

        VerticalLayout {
            padding-top: 0;
            padding-bottom: 2px;
            padding-left: 2px;
            padding-right: 2px;

            preferred-width: scroll_inner.preferred-width;
            preferred-height: scroll_inner.preferred-height;

            Rectangle {
                border-width: 1px;
                border-radius: 4px;
                border-color: Palette.border;
    
                ScrollView {
                    scroll_inner := VerticalBox {
                        // Alert box
                        if has_error_message: Rectangle {
                            padding: 1rem;
                            background: red.with-alpha(0.2);
                
                            Text { 
                                text: error_message;
                                wrap: word-wrap;
                                vertical-alignment: top;
                            }
                        }
                        
                        if !has_error_message && has_file_path : AbcListView {
                            indent_width: 16px;
                            archive_items: abc_list_view_archive_items;
                            nodes: abc_list_view_nodes;
                        }
                    }
                }
            }
        }
    }
}
